import random
from v_40_settings_for_server import SettingBrowserClass
from v40_start_for_server import StartLoginQuit
from v40_setting_account import SettingAccount
from v40_like import UpVote
from v40_walker import Walker
from v40_smart_bot import SmartBot
from Data.data import user_setting_dict
from multiprocessing import Pool
import datetime
import time


class Mass:  # –ö–ª–∞—Å—Å –¥–ª—è –º–∞—Å—Å–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π

    def __init__(self):
        pass

    @staticmethod
    def start_smart_top(i):
        my_bot = SmartBot(i)

        url = 'https://www.reddit.com/r/smallboobs'
        sub_name = 'smallboobs'
        post_title_like = "What my colleagues don't get to see"

        try:
            my_bot.start_browser()
            my_bot.open_communities_url(url)
            my_bot.random_subscribe()
            my_bot.start_sub_scroll()
            my_bot.check_post_in_page(post_title_like)

            if my_bot.flag_check_post == 1:
                my_bot.tab_top_script(url, post_title_like)
            else:
                my_bot.tab_new_script(sub_name, post_title_like)

        except Exception as e:
            my_bot.close_browser()
            print(f'Account{my_bot.count}({my_bot.username}: {datetime.datetime.now()}): [-] –ü–†–û–ë–õ–ï–ú–´! –í–´–õ–ï–¢–ï–õ –ü–û –ü–†–ò–ß–ò–ù–ï: {e}')

    @staticmethod
    def start_mass_like(i):  # start for script # –°—Ç–∞—Ä—Ç –æ—Å–Ω–æ–≤–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞
        my_like = Walker(i)
        url = 'https://www.reddit.com/r/DadWouldBeProud'
        sub_name = 'DadWouldBeProud'
        post_title_like = "I'm so playful today"

        try:
            my_like.start_browser()
            my_like.open_communities_url(url)
            my_like.random_subscribe()
            my_like.tab_new(sub_name)
            my_like.search_post_with_title_name(post_title_like)
            my_like.up_vote_random()
            my_like.save_or_share_or_pass()
            my_like.script_open_author()
            my_like.close_browser()

        except Exception as e:
            my_like.close_browser()
            print(f'–ü—Ä–æ–±–ª–µ–º—ã —Å –º–∞—Å—Å.–ª–∞–π–∫–∏–Ω–≥–æ–º: {e}')

    @staticmethod
    def start_mass_dislike(i):  # C—Ç–∞—Ä—Ç –º–∞—Å—Å –¥–∏–∑–ª–∞–π–∫
        my_like = UpVote(i)
        url = 'https://www.reddit.com/r/ass'
        post_title_dis = 'Can my warm butt make your soldier stand up'
        try:
            my_like.start_browser()
            my_like.open_communities_url(url)
            my_like.random_subscribe()
            my_like.search_post_with_title_name(post_title_dis)
            my_like.down_vote_random()
            my_like.close_browser()

        except Exception as e:
            my_like.close_browser()
            print(f'–ü—Ä–æ–±–ª–µ–º—ã —Å –º–∞—Å—Å.–î–ò–ó–ª–∞–π–∫–∏–Ω–≥–æ–º: {e}')

    @staticmethod
    def start_mass_walker(i):
        bot = Walker(i)
        start_time = time.time()
        try:
            bot.walking_start()
            while time.time() - start_time < 900:
                random_num = random.random()
                bot.scrolling_and_open_post()

                if random_num < 0.15:
                    bot.script_like_post_and_save()
                if 0.15 < random_num < 0.5:
                    bot.close_post()
                if 0.5 < random_num < 0.85:
                    bot.script_open_author()
                if 0.85 < random_num < 1:
                    bot.script_like_post_and_open_author()

            print(f"Account{bot.count}: {datetime.datetime.now()}:: [+]  –ó–∞–∫–æ–Ω—á–∏–ª –≥—É–ª—è—Ç—å!")
            bot.close_browser()
        except Exception as e:
            bot.close_browser()
            print(f"Account{bot.count}: {datetime.datetime.now()}: [-]  –í—ã–ª–µ—Ç–µ–ª —Å –ø—Ä–æ–≥—É–ª–∏")

    @staticmethod
    def start_mass_check_like_account(i):
        my_bot = SmartBot(i)

        url = 'https://www.reddit.com/r/smallboobs'
        sub_name = 'smallboobs'
        post_title_like = "They‚Äôre small but they‚Äôre bouncy üòÜ"

        try:
            my_bot.start_browser()
            my_bot.open_communities_url(url)
            my_bot.tab_new(sub_name)
            my_bot.search_post_with_title_name(post_title_like)
            my_bot.get_post_url()
            my_bot.check_like()
            my_bot.close_browser()

        except Exception as e:
            my_bot.close_browser()
            print(f"Account{my_bot.count}: {datetime.datetime.now()}: [-]  –û—à–∏–±–∫–∞ —á–µ–∫–µ—Ä–∞ –ª–∞–π–∫–æ–≤")
            print({e})

    @staticmethod
    def start_mass_random_like(i):  # start for script # –°—Ç–∞—Ä—Ç –æ—Å–Ω–æ–≤–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞
        my_like = UpVote(i)
        url = 'https://www.reddit.com/r/IRLgirls'
        sub_name = 'IRLgirls'
        post_title = ['Gorgeous blonde in her bikini (IUTR)', '1243', '124']

        try:
            my_like.start_browser()
            # my_like.open_sub_random(sub_name, url)
            my_like.open_communities_url(url)
            my_like.random_subscribe()
            my_like.tab_new(sub_name)
            my_like.search_post_with_title_name(random.choice(post_title))
            my_like.up_vote_random()
            my_like.save_or_share_or_pass()
            my_like.close_browser()

        except Exception as e:
            my_like.start_menu()
            print(f'–ü—Ä–æ–±–ª–µ–º—ã —Å –º–∞—Å—Å.–ª–∞–π–∫–∏–Ω–≥–æ–º: {e}')

    @staticmethod   # –°—Ç–∞—Ä—Ç –æ—Å–Ω–æ–≤–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞
    def start_mass_setting_account(i):  # start for script
        my_like = SettingAccount(i)
        try:
            my_like.start_browser()
            my_like.setting_nsfw()
            my_like.close_browser()
        except Exception as e:
            my_like.start_menu()
            print(f'–ü—Ä–æ–±–ª–µ–º—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {e}')

    @staticmethod   # –°—Ç–∞—Ä—Ç –æ—Å–Ω–æ–≤–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞
    def start_mass_auth(i):  # start for script
        my_mass_bot = StartLoginQuit(i)
        my_mass_bot.start_browser()

    @staticmethod
    def setting_one_account_hard(i):
        my_like = UpVote(i)
        try:
            my_like.start_browser()
            time.sleep(1000)
            my_like.close_browser()
        except Exception as e:
             print(f'–ü—Ä–æ–±–ª–µ–º—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {e}')

    @staticmethod
    def check_acc(i):
        my_like = UpVote(i)
        login_list = [user_setting_dict[key]['login'] for key in user_setting_dict.keys()]

        try:
            my_like.start_browser()
            for login in login_list:
                # –∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                my_like.browser.execute_script(f"window.open('https://www.reddit.com/user/{login}');")
            time.sleep(1000)
            my_like.close_browser()

        except Exception as e:
            print(f'–ü—Ä–æ–±–ª–µ–º—ã —Å —á–µ–∫–µ—Ä–æ–º: {e}')

    @staticmethod   # –°—Ç–∞—Ä—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥—Ä–∞–π–≤–µ—Ä–∞
    def test_driver_settings(i):
        try:
            te1st = SettingBrowserClass(i)
            browser = te1st.setting_browser_bot()
            browser.get('https://whoer.net/ru')
            time.sleep(100)

        except Exception as e:
            print(f'–ü—Ä–æ–±–ª–µ–º—ã —Å —Ç–µ—Å—Ç–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}')


def main():
    try:  # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø—É–ª–∞
        print('–ü—Ä–∏–≤–µ—Ç, —á—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?! \n 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∫—Å–∏ \n 2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ \n 3. –õ–∞–π–∫–∏ –æ–¥–∏–Ω –¥–∏–∞–ø.  \n 4. –†—É—á–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–º  \n 5. –ß–µ–∫–µ—Ä –∞–∫–∫–∞—É–Ω—Ç–æ–≤  \n 6. –°–∫–∞–Ω–µ—Ä –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤(–±–∞–≥–∏) \n 7. –ó–∞–ø—É—Å–∫ –ø–æ —Ü–µ–ø–æ—á–∫–µ \n 8. –î–∏–∑–ª–∞–π–∫ –≤ –æ–¥–∏–Ω –¥–∏–∞–ø–∞–∑–æ–Ω \n 9. –ì—É–ª—è–ª–∫–∞(15-20 –º–∏–Ω—É—Ç)')
        start_question = input("–°–¥–µ–ª–∞–π –≤—ã–±–æ—Ä –∏ –Ω–∞–ø–∏—à–∏ —Ü–∏—Ñ—Ä—É(–±–µ–∑ —Ç–æ—á–∫–∏): ")

        if start_question == '1':
            min_num_account = int(input('–í–≤–µ–¥–∏ –¥–∏–∞–ø–∞–∑–æ–Ω –∞–∫–∫–∞—É–Ω—Ç–æ–≤, –¥–ª—è –ª–∞–π–∫–∏–Ω–≥–∞! \n –° –∫–∞–∫–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ —Å—Ç–∞—Ä—Ç—É–µ–º? (–ù–∞–ø–∏—à–∏ —Ü–∏—Ñ—Ä—É): '))
            max_num_account = int(input('–ù–∞ –∫–∞–∫–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ –∑–∞–∫–æ–Ω—á–∏–º? (–ù–∞–ø–∏—à–∏ —Ü–∏—Ñ—Ä—É): ')) + 1
            number_of_active_profiles = int(max_num_account - min_num_account)

            loading_profile_data = [i for i in range(min_num_account, max_num_account)]  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤

            if loading_profile_data is not None:
                with Pool(number_of_active_profiles) as p:  # –ú–£–õ–¨–¢–ò–ü–†–û–¶–ï–°–°–ò–ù–ì
                    p.map(Mass.test_driver_settings, loading_profile_data)

        if start_question == '2':
            min_num_account = int(input('–í–≤–µ–¥–∏ –¥–∏–∞–ø–∞–∑–æ–Ω –∞–∫–∫–∞—É–Ω—Ç–æ–≤, –¥–ª—è –ª–∞–π–∫–∏–Ω–≥–∞! \n –° –∫–∞–∫–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ —Å—Ç–∞—Ä—Ç—É–µ–º? (–ù–∞–ø–∏—à–∏ —Ü–∏—Ñ—Ä—É): '))
            max_num_account = int(input('–ù–∞ –∫–∞–∫–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ –∑–∞–∫–æ–Ω—á–∏–º? (–ù–∞–ø–∏—à–∏ —Ü–∏—Ñ—Ä—É): ')) + 1
            number_of_active_profiles = int(max_num_account - min_num_account)
            a = int(number_of_active_profiles + 1)
            loading_profile_data = [i for i in range(min_num_account, max_num_account)]  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤

            if loading_profile_data is not None:
                with Pool(number_of_active_profiles) as p:  # –ú–£–õ–¨–¢–ò–ü–†–û–¶–ï–°–°–ò–ù–ì
                    p.map(Mass.start_mass_setting_account, loading_profile_data)

        if start_question == '3':

            min_num_account = int(input('–í–≤–µ–¥–∏ –¥–∏–∞–ø–∞–∑–æ–Ω –∞–∫–∫–∞—É–Ω—Ç–æ–≤, –¥–ª—è –ª–∞–π–∫–∏–Ω–≥–∞! \n –° –∫–∞–∫–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ —Å—Ç–∞—Ä—Ç—É–µ–º? (–ù–∞–ø–∏—à–∏ —Ü–∏—Ñ—Ä—É): '))
            max_num_account = int(input('–ù–∞ –∫–∞–∫–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ –∑–∞–∫–æ–Ω—á–∏–º? (–ù–∞–ø–∏—à–∏ —Ü–∏—Ñ—Ä—É): ')) + 1
            number_of_active_profiles = int(max_num_account - min_num_account)

            loading_profile_data = [i for i in range(min_num_account, max_num_account)]  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤

            if loading_profile_data is not None:
                with Pool(number_of_active_profiles) as p:  # –ú–£–õ–¨–¢–ò–ü–†–û–¶–ï–°–°–ò–ù–ì
                    p.map(Mass.start_mass_like, loading_profile_data)

        if start_question == '4':

            number_account = int(input('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è: '))
            Mass.setting_one_account_hard(number_account)

        if start_question == '5':
            Mass.check_acc(1)

        if start_question == '6':
            min_num_account = int(input('–í–≤–µ–¥–∏ –¥–∏–∞–ø–∞–∑–æ–Ω –∞–∫–∫–∞—É–Ω—Ç–æ–≤, –¥–ª—è –ª–∞–π–∫–∏–Ω–≥–∞! \n –° –∫–∞–∫–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ —Å—Ç–∞—Ä—Ç—É–µ–º? (–ù–∞–ø–∏—à–∏ —Ü–∏—Ñ—Ä—É): '))
            max_num_account = int(input('–ù–∞ –∫–∞–∫–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ –∑–∞–∫–æ–Ω—á–∏–º? (–ù–∞–ø–∏—à–∏ —Ü–∏—Ñ—Ä—É): ')) + 1
            number_of_active_profiles = int(max_num_account - min_num_account)

            loading_profile_data = [i for i in range(min_num_account, max_num_account)]  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤

            if loading_profile_data is not None:
                with Pool(number_of_active_profiles) as p:  # –ú–£–õ–¨–¢–ò–ü–†–û–¶–ï–°–°–ò–ù–ì
                    p.map(Mass.setting_one_account_hard, loading_profile_data)

        if start_question == '7':
            # –°–ø–∏—Å–æ–∫ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
            ranges = [(1, 15), (16, 30), (46, 60), (61, 75), (76, 90), (91, 102)]
            random.shuffle(ranges)
            print(ranges)

            for start, end in ranges:
                number_of_active_profiles = end - start + 1
                loading_profile_data = [i for i in range(start, end)]

                if loading_profile_data is not None:
                    with Pool(number_of_active_profiles) as p:
                        p.map(Mass.start_mass_like, loading_profile_data)

        if start_question == '8':
            min_num_account = int(input('–í–≤–µ–¥–∏ –¥–∏–∞–ø–∞–∑–æ–Ω –∞–∫–∫–∞—É–Ω—Ç–æ–≤, –¥–ª—è –ª–∞–π–∫–∏–Ω–≥–∞! \n –° –∫–∞–∫–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ —Å—Ç–∞—Ä—Ç—É–µ–º? (–ù–∞–ø–∏—à–∏ —Ü–∏—Ñ—Ä—É): '))
            max_num_account = int(input('–ù–∞ –∫–∞–∫–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ –∑–∞–∫–æ–Ω—á–∏–º? (–ù–∞–ø–∏—à–∏ —Ü–∏—Ñ—Ä—É): ')) + 1
            number_of_active_profiles = int(max_num_account - min_num_account)

            loading_profile_data = [i for i in range(min_num_account, max_num_account)]  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤

            if loading_profile_data is not None:
                with Pool(number_of_active_profiles) as p:  # –ú–£–õ–¨–¢–ò–ü–†–û–¶–ï–°–°–ò–ù–ì
                    p.map(Mass.start_mass_dislike, loading_profile_data)

        if start_question == '9':
            # –°–ø–∏—Å–æ–∫ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
            ranges = [(1, 15), (16, 30), (46, 60), (61, 75), (76, 90), (91, 102)]
            random.shuffle(ranges)
            print(ranges)
            for start, end in ranges:
                number_of_active_profiles = end - start + 1
                loading_profile_data = [i for i in range(start, end)]

                if loading_profile_data is not None:
                    with Pool(number_of_active_profiles) as p:
                        p.map(Mass.start_mass_walker, loading_profile_data)

        if start_question == '10':
            # –°–ø–∏—Å–æ–∫ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
            ranges = [(1, 16), (16, 31), (46, 61), (61, 76), (76, 91), (91, 103)]
            random.shuffle(ranges)
            print(ranges)

            for start, end in ranges:
                number_of_active_profiles = end - start + 1
                loading_profile_data = [i for i in range(start, end)]

                if loading_profile_data is not None:
                    with Pool(number_of_active_profiles) as p:
                        p.map(Mass.start_smart_top, loading_profile_data)

        if start_question == '11':
            min_num_account = int(input('–í–≤–µ–¥–∏ –¥–∏–∞–ø–∞–∑–æ–Ω –∞–∫–∫–∞—É–Ω—Ç–æ–≤, –¥–ª—è –ª–∞–π–∫–∏–Ω–≥–∞! \n –° –∫–∞–∫–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ —Å—Ç–∞—Ä—Ç—É–µ–º? (–ù–∞–ø–∏—à–∏ —Ü–∏—Ñ—Ä—É): '))
            max_num_account = int(input('–ù–∞ –∫–∞–∫–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ –∑–∞–∫–æ–Ω—á–∏–º? (–ù–∞–ø–∏—à–∏ —Ü–∏—Ñ—Ä—É): ')) + 1
            number_of_active_profiles = int(max_num_account - min_num_account)

            loading_profile_data = [i for i in range(min_num_account, max_num_account)]  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤

            if loading_profile_data is not None:
                with Pool(number_of_active_profiles) as p:  # –ú–£–õ–¨–¢–ò–ü–†–û–¶–ï–°–°–ò–ù–ì
                    p.map(Mass.start_mass_check_like_account, loading_profile_data)

    except Exception as e:
        print(f'–ü—Ä–æ–±–ª–µ–º—ã —Å –º—É–ª—å—Ç–∏–ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥–æ–º: {e}')


if __name__ == '__main__':
    main()

